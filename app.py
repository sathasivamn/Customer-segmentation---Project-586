import streamlit as st
import pandas as pd
import joblib

# Load model and scaler
model = joblib.load("best_kmeans_model.joblib")
scaler = joblib.load("scaler_kmeans.pkl")

st.set_page_config(page_title="Customer Segmentation (KMeans)", page_icon="ðŸ§©", layout="centered")
st.title("Customer Segmentation App ðŸ§©")

st.markdown("""
Predict the **Customer Segment** using a model trained on clusters generated by **K-Means Clustering**  
using 7 key numeric features.
""")

st.divider()

# -----------------------------
# User input
# -----------------------------
col1, col2 = st.columns(2)

with col1:
    Age = st.number_input("Age", 18, 100, 30)
    Income = st.number_input("Income", 0, 200000, 50000)
    Total_Spending = st.number_input("Total Spending (sum of purchases)", 0, 50000, 1000)
    Recency = st.number_input("Recency (Days since last purchase)", 0, 365, 30)

with col2:
    NumWebPurchases = st.number_input("Number of Web Purchases", 0, 100, 10)
    NumStorePurchases = st.number_input("Number of Store Purchases", 0, 100, 5)
    NumWebVisitsMonth = st.number_input("Number of Web Visits in Month", 0, 50, 3)

input_data = pd.DataFrame({
    "Age": [Age],
    "Income": [Income],
    "Total_Spending": [Total_Spending],
    "NumWebPurchases": [NumWebPurchases],
    "NumStorePurchases": [NumStorePurchases],
    "NumWebVisitsMonth": [NumWebVisitsMonth],
    "Recency": [Recency]
})

# -----------------------------
# Predict segment
# -----------------------------
scaled_input = scaler.transform(input_data)

if st.button("Predict Segment"):
    cluster_pred = int(model.predict(scaled_input)[0])  # ensure integer
    st.success(f"ðŸŽ¯ Predicted Customer Segment: **Cluster {cluster_pred}**")

    # Cluster averages table
    cluster_summary = pd.DataFrame({
        "Cluster": [0, 1],
        "Avg_Income": [35752.87, 70398.89],
        "Avg_Total_Spending": [118.02, 1052.92],
        "Avg_Age": [54.08, 58.48],
        "Avg_Recency": [48.66, 49.40]
    })
    cluster_summary['Cluster'] = cluster_summary['Cluster'].astype(int)

    matched = cluster_summary[cluster_summary['Cluster'] == cluster_pred]
    if not matched.empty:
        st.write("---")
        st.markdown("**Cluster profile (averages)**")
        st.write(pd.DataFrame([matched.iloc[0]]))

    # Detailed textual summary
    st.write("---")
    st.markdown("**Cluster Summary (Textual Insights):**")
    if cluster_pred == 0:
        st.markdown("""
- **Age:** Slightly younger customers (~54 years old).  
- **Income:** Moderate income (~35,700).  
- **Children:** More likely to have kids at home.  
- **Spending:** Low total spending (~118).  
- **Recency:** Moderate recency (~49 days).  
- **Engagement:** Less likely to accept campaigns (~16%).  
**Profile:** Moderate-value family customers.
""")
    elif cluster_pred == 1:
        st.markdown("""
- **Age:** Older customers (~58 years old).  
- **Income:** High income (~70,400).  
- **Children:** Fewer children at home.  
- **Spending:** High total spending (~1,053).  
- **Recency:** Similar recency (~49 days).  
- **Engagement:** More likely to accept campaigns (~39%).  
**Profile:** High-value, affluent customers.
""")

 








